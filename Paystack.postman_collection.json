{
	"info": {
		"_postman_id": "4106a572-5eb2-4ba5-acb4-9534581cc7fc",
		"name": "Paystack",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SampleWork",
			"item": [
				{
					"name": "Sample - Valid Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var schemaPlan = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"rotation_period\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"orbital_period\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"diameter\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"climate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gravity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"terrain\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"surface_water\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"population\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"residents\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"films\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"edited\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"name\",\r",
									"    \"rotation_period\",\r",
									"    \"orbital_period\",\r",
									"    \"diameter\",\r",
									"    \"climate\",\r",
									"    \"gravity\",\r",
									"    \"terrain\",\r",
									"    \"surface_water\",\r",
									"    \"population\",\r",
									"    \"residents\",\r",
									"    \"films\",\r",
									"    \"created\",\r",
									"    \"edited\",\r",
									"    \"url\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"// Verify JSON schema\r",
									"pm.test(\"JSON schema is valid\", () => {\r",
									"    pm.expect(tv4.validate(jsonData, schemaPlan)).to.be.true;\r",
									"})\r",
									"\r",
									"// Verify response time does not exceed 3ms\r",
									"pm.test(\"Response time is less than 3ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
									"});\r",
									"\r",
									"// Verify response data \r",
									"pm.test(\"Response data verified\", ()=> {\r",
									"    pm.expect(jsonData.climate).to.contain('tropical');\r",
									"    pm.expect(jsonData.name).to.eql(\"Yavin IV\");\r",
									"    pm.expect(jsonData.diameter).to.eql(\"10200\");\r",
									"    pm.expect(jsonData.residents).to.be.empty;\r",
									"    pm.expect(jsonData.films).to.be.not.empty;\r",
									"});\r",
									"\r",
									"// Verify response header\r",
									"pm.test(\"Response headers verified\", () => {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"    pm.response.to.have.header(\"Vary\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\");\r",
									"    pm.response.to.have.header(\"ETag\");\r",
									"    pm.response.to.have.header(\"Allow\");\r",
									"    pm.response.to.have.header(\"Strict-Transport-Security\");    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/planets/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"planets",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sample - Invalid Request Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Verify the response code is 405\r",
									"pm.test(\"Response code is 405\", () => {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//Verify that the response message equals \"Method 'POST' not allowed.\"\r",
									"pm.test(\"Response message is valid\", () => {\r",
									"    pm.expect(jsonData.detail).to.equal(\"Method 'POST' not allowed.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Automated testing\",\r\n    \"Completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://swapi.dev/api/planets/3",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"planets",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mock",
			"item": [
				{
					"name": "MockTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify the name object is not Yavin IV\r",
									"pm.test(\"The name object is changed\", ()=> {\r",
									"    pm.expect(pm.response.json().name).to.not.eql(\"Yavin IV\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock}}/api/planets/3",
							"host": [
								"{{mock}}"
							],
							"path": [
								"api",
								"planets",
								"3"
							]
						}
					},
					"response": [
						{
							"name": "Example",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://c9e56645-6747-4471-ad8d-e258c4416f18.mock.pstmn.io/api/planets/3",
									"protocol": "https",
									"host": [
										"c9e56645-6747-4471-ad8d-e258c4416f18",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"api",
										"planets",
										"3"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"name\": \"Bashir Alatishe\",\r\n    \"rotation_period\": \"24\",\r\n    \"orbital_period\": \"4818\",\r\n    \"diameter\": \"10200\",\r\n    \"climate\": \"temperate, tropical\",\r\n    \"gravity\": \"1 standard\",\r\n    \"terrain\": \"jungle, rainforests\",\r\n    \"surface_water\": \"8\",\r\n    \"population\": \"1000\",\r\n    \"residents\": [],\r\n    \"films\": [\r\n        \"https://swapi.dev/api/films/1/\"\r\n    ],\r\n    \"created\": \"2014-12-10T11:37:19.144000Z\",\r\n    \"edited\": \"2014-12-20T20:58:18.421000Z\",\r\n    \"url\": \"https://swapi.dev/api/planets/3/\"\r\n}"
						},
						{
							"name": "Example 2",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://c9e56645-6747-4471-ad8d-e258c4416f18.mock.pstmn.io/api/planets/2",
									"protocol": "https",
									"host": [
										"c9e56645-6747-4471-ad8d-e258c4416f18",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"api",
										"planets",
										"2"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"name\": \"Imtiyaaz\",\r\n    \"rotation_period\": \"24\",\r\n    \"orbital_period\": \"4818\",\r\n    \"diameter\": \"10200\",\r\n    \"climate\": \"temperate, tropical\",\r\n    \"gravity\": \"1 standard\",\r\n    \"terrain\": \"jungle, rainforests\",\r\n    \"surface_water\": \"8\",\r\n    \"population\": \"1000\",\r\n    \"residents\": [],\r\n    \"films\": [\r\n        \"https://swapi.dev/api/films/1/\"\r\n    ],\r\n    \"created\": \"2014-12-10T11:37:19.144000Z\",\r\n    \"edited\": \"2014-12-20T20:58:18.421000Z\",\r\n    \"url\": \"https://swapi.dev/api/planets/3/\"\r\n}"
						}
					]
				}
			]
		}
	]
}